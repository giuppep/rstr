# Adapted from https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/release.yml
name: Release

on:
  push:
    branches:
      - $default-branch
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      rstr_version: ${{ env.RSTR_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RSTR_VERSION == ''
        run: |
          echo "RSTR_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: $RSTR_VERSION"
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RSTR_VERSION }}
          release_name: ${{ env.RSTR_VERSION }}

  build-release:
    name: build-release
    needs:
      - create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        build: [linux, linux-arm, macos, deb]
        include:
          - build: linux
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: linux-arm
            os: ubuntu-18.04
            rust: nightly
            target: arm-unknown-linux-gnueabihf
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: deb
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build release binary
        if: matrix.build != 'deb'
        uses: actions-rs/cargo@v1
        with:
          use-cross: true
          command: build
          args: --verbose --release --all-features --target ${{ matrix.target }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/rstr"

      - name: Build archive
        if: matrix.build != 'deb'
        shell: bash
        run: |
          build_name="rstr-${{ needs.create-release.outputs.rstr_version }}-${{ matrix.target }}"
          mkdir $build_name
          cp {README.md,LICENSE} "$build_name/"
          cp "target/${{ matrix.target }}/release/rstr" "$build_name/"
          tar czf "$build_name.tar.gz" "$build_name"
          echo "ASSET=$build_name.tar.gz" >> $GITHUB_ENV

      - name: Create debian package
        if: matrix.build == 'deb'
        shell: bash
        run: |
          sudo apt-get install -y musl-tools
          cargo install cargo-deb
          cargo deb --target ${{ matrix.target }} -p rstr_server
          deb_pkg=rstr_${{ needs.create-release.outputs.rstr_version }}_amd64.deb
          mv target/${{ matrix.target }}/debian/$deb_pkg .
          echo "ASSET=$deb_pkg" >> $GITHUB_ENV
          
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
